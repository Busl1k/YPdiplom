scooter_rent=# \d "Couriers"
                                         Table "public.Couriers"
    Column    |           Type           | Collation | Nullable |                Default
--------------+--------------------------+-----------+----------+----------------------------------------
 id           | integer                  |           | not null | nextval('"Couriers_id_seq"'::regclass)
 login        | character varying(255)   |           | not null |
 passwordHash | character varying(255)   |           |          |
 firstName    | character varying(255)   |           |          |
 createdAt    | timestamp with time zone |           | not null |
 updatedAt    | timestamp with time zone |           | not null |
Indexes:
    "Couriers_pkey" PRIMARY KEY, btree (id)
    "Couriers_login_key" UNIQUE CONSTRAINT, btree (login)

scooter_rent=# \d "Orders"
                                         Table "public.Orders"
    Column    |           Type           | Collation | Nullable |               Default
--------------+--------------------------+-----------+----------+--------------------------------------
 id           | integer                  |           | not null | nextval('"Orders_id_seq"'::regclass)
 courierId    | integer                  |           |          |
 firstName    | character varying(255)   |           |          |
 lastName     | character varying(255)   |           |          |
 address      | character varying(255)   |           |          |
 metroStation | character varying(255)   |           |          |
 phone        | character varying(255)   |           |          |
 rentTime     | integer                  |           |          |
 deliveryDate | timestamp with time zone |           |          |
 track        | integer                  |           |          |
 inDelivery   | boolean                  |           |          |
 color        | character varying(255)[] |           |          |
 comment      | character varying(255)   |           |          |
 cancelled    | boolean                  |           |          |
 finished     | boolean                  |           |          |
 createdAt    | timestamp with time zone |           | not null |
 updatedAt    | timestamp with time zone |           | not null |
Indexes:
    "Orders_pkey" PRIMARY KEY, btree (id)

Задание 1
Представь: тебе нужно проверить, отображается ли созданный заказ в базе данных.
Для этого: выведи список логинов курьеров с количеством их заказов в статусе «В доставке» (поле inDelivery = true). 
В "Couriers":

Поле id – идентификатор курьера.
Поле login – логин курьера.
В "Orders":

Поле courierId – указывает на ID курьера.
Поле inDelivery – отвечает за статус "В доставке".

SQL-запрос
подсчитает количество заказов в доставке у каждого курьера:

SELECT c.login, COUNT(o.id) AS delivery_count
FROM "Couriers" c
JOIN "Orders" o ON c.id = o."courierId"
WHERE o."inDelivery" = true
GROUP BY c.login
ORDER BY delivery_count DESC;

Задание 2
Ты тестируешь статусы заказов. Нужно убедиться, что в базе данных они записываются корректно.
Для этого: выведи все трекеры заказов и их статусы. 
Статусы определяются по следующему правилу:
Если поле finished == true, то вывести статус 2.
Если поле canсelled == true, то вывести статус -1.
Если поле inDelivery == true, то вывести статус 1.
Для остальных случаев вывести 0.

SQL-запрос
SELECT 
    "track", 
    CASE 
        WHEN "finished" = true THEN 2
        WHEN "cancelled" = true THEN -1
        WHEN "inDelivery" = true THEN 1
        ELSE 0
    END AS status
FROM "Orders";
